
pool:
  vmImage: 'ubuntu-latest'

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/Socially.Core
      - src/Socially.Server.DataAccess
      - src/Socially.Server.Services
      - src/Socially.WebAPI
      - pipelines/webAPI.yaml

variables:
  devopsOrg: https://dev.azure.com/nevillenazerane
  devopsProject: publishes

  migrationProjectPath: src/Socially.Utils.MigrationConsole
  projectPath: src/Socially.WebAPI
  destDirectory: /var/www/socially
  migrationDirectory: /var/www/sociallyMigration
  migrationProjectName: Socially.Utils.MigrationConsole
  projectName: Socially.WebAPI
  devPort: 5030
  prodPort: 6000
  prodSlotPort: 5050
  prodSlotFile: /var/www/currentSlot

  serviceDescription: Socially API
  serviceidentifier: sociallyAPI
  servicename: kestrel-socially


resources:
  repositories:
    - repository: templates
      type: github
      name: neville-nazerane/Common-Pipelines
      endpoint: github.com_neville-nazerane

stages:

  - stage: Build
    displayName: Compile API
    jobs:
      - job: DotnetBuild
        displayName: Building and Publishing
        steps:

          - script: |
              mkdir publishes
              dotnet publish $(projectPath) -c release -o published
              tar -czvf publishes/packed.tar.gz -C published .

              dotnet publish $(migrationProjectPath) -c debug -o migration
              tar -czvf publishes/migration.tar.gz -C migration .

            displayName: Compile and Compress

          - publish: publishes
            artifact: packed

  - stage: DeployDev
    variables: 
      - group: Socially-Dev
    displayName: Deploy to Dev
    jobs:
      - deployment: DevDeploy
        displayName: Deploy to Development VM
        environment:
          name: Development
          resourceType: VirtualMachine
          resourceName: websites
        strategy:
          runOnce:
            deploy:
              steps:

                - script: |

                    sudo rm -rf $(destDirectory)
                    sudo mkdir $(destDirectory)
                    
                    sudo tar -xzvf packed.tar.gz -C $(destDirectory)

                    rm -rf *
                  displayName: Copying website
                  workingDirectory: $(Pipeline.Workspace)/packed
                  failOnStderr: true

                - task: DeleteFiles@1
                  displayName: Clean up

                - template: recreate-service.yml
                  parameters:
                    port: $(devPort)
                    destDirectory: $(destDirectory)
                    servicename: $(servicename)
                    varGroup: Socially-Dev


  - stage: DeployProd
    variables:
      - group: Socially-Prod
    displayName: Deploy to Production
    jobs:
      - deployment: ProdDeploy
        displayName: Deploy to Production VM
        environment:
          name: SociallyAPI
          resourceType: VirtualMachine
          resourceName: socially-api
        strategy:
          runOnce:
            deploy:
              steps:

                # fetching target slot info
                - bash: |
                    filename=$(prodSlotFile)
                    if test -f $filename; then
                      mapfile currentSlot < $filename;
                    else 
                      currentSlot=''; 
                    fi

                    if [ $currentSlot == 'blue' ]; then 
                      targetSlot='green'; 
                    else 
                      targetSlot='blue'; 
                    fi

                    echo 'current state: '$currentSlot

                    echo "##vso[task.setvariable variable=currentSlot;]$currentSlot"
                    echo "##vso[task.setvariable variable=targetSlot;]$targetSlot"

                  displayName: Getting blue-green state

                # copying website to dest 
                - script: |
                    sudo rm -rf $(destDirectory)-$(targetSlot)
                    sudo mkdir $(destDirectory)-$(targetSlot)
                    sudo tar -xzvf packed.tar.gz -C $(destDirectory)-$(targetSlot)

                  displayName: Copying website
                  workingDirectory: $(Pipeline.Workspace)/packed
                  failOnStderr: true

                - template: recreate-service.yml
                  parameters:
                    port: $(prodSlotPort)
                    destDirectory: $(destDirectory)-$(targetSlot)
                    servicename: $(servicename)-$(targetSlot)
                    varGroup: Socially-Prod

                - script: |
                    curl localhost:$(prodSlotPort)/health --fail || exit 125
                    # health=$(curl localhost:$(prodSlotPort)/health --fail --silent --show-error);
                    # echo 'status is: '$health
                    # if [ $health != 'Healthy' ]; then exit 125; fi
                  displayName: Health check on slot
                  failOnStderr: true
                  retryCountOnTaskFailure: 3

                # Running migrations 
                - script: |
                    sudo rm -rf $(migrationDirectory)
                    sudo mkdir $(migrationDirectory)
                    sudo tar -xzvf migration.tar.gz -C $(migrationDirectory)

                    dotnet $(migrationDirectory)/$(migrationProjectName).dll "$(dbAdminConnectionString)"
                    sudo rm -rf $(migrationDirectory)
                  displayName: Running migrations
                  workingDirectory: $(Pipeline.Workspace)/packed
                  failOnStderr: true

                # stopping the main service 
                - script: sudo systemctl stop $(servicename)-$(currentSlot).service
                  displayName: Stopping main service
                  condition: and(succeeded(), ne(variables.currentSlot, ''))

                - template: recreate-service.yml
                  parameters:
                    port: $(prodPort)
                    destDirectory: $(destDirectory)-$(targetSlot)
                    servicename: $(servicename)-$(targetSlot)
                    varGroup: Socially-Prod

                - task: DeleteFiles@1
                  displayName: Clean up
  
                - script: echo $(targetSlot) | sudo tee $(prodSlotFile)
                  displayName: updating slot file
                


# extends:
#   template: Shared\netcore-ubuntu.yml@templates
#   parameters:
#     useVersion: 7.x
#     projectPath: src/Socially.WebAPI
#     projectName: Socially.WebAPI
#     destDirectory: /var/www/socially
#     port: 5030

#     service:
#       description: Socially API
#       identifier: sociallyAPI
#       name: kestrel-socially

#     preBuildSteps:
#       - script: dotnet run "$(dbAdminConnectionString)"
#         workingDirectory: src/Socially.Utils.MigrationConsole

#     configs:
#       ASPNETCORE_ENVIRONMENT: Production
#       connectionStrings__db: $(Secrets.Db)
#       appinsights: $(Secrets.web_appInsights)
#       sendGridApiKey: $(Secrets.sendgrid)
#       blobConnString: $(Secrets.blobConnString)

#       authOptions__secret: $(Secrets.AuthSecret)
#       authOptions__audiences: website
#       authOptions__issuer: https://api.sociallyconnections.com

#       settings__clientBaseUrl: https://sociallyconnections.com
#       settings__emailFrom: accounts@sociallyconnections.com
#       settings__forgotPasswordTemplate: $(Secrets.forgotPasswordTemplate)
#       settings__imageBase: https://pics.sociallyconnections.com






