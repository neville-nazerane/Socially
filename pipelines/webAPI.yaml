
variables:
  url.port: '5050'
  
  service.port: '5080'
  service.directory: '\/var\/www\/socially'
  service.dll: 'Socially.WebAPI.dll'
  

parameters:
  - name: service2
    type: object
    default: 
      port: '5052'
      directory: '/var/www/socially'
      dll: 'Socially.WebAPI.dll'
  - name: stuffing
    type: string
    default: 'na na na na'
  - name: configs
    type: object
    default:
      - title: Jason
        val: todd
      - title: Tim
        val: Drake


pool:
  vmImage: 'ubuntu-18.04'

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/Socially.Core
      - src/Socially.Server.DataAccess
      - src/Socially.Server.Services
      - src/Socially.WebAPI
    

stages:
  - stage: CI
    jobs:
      - job: DotNet
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk'
          inputs:
            packageType: sdk
            version: 5.0.100-preview.2.20176.6
            installationPath: $(Agent.ToolsDirectory)/dotnet
          
        - script: 'dotnet test src/Socially.Server.Managers.Tests -c release'
          displayName: 'Unit Test - Managers'

        - script: 'dotnet test src/Socially.WebAPI.IntegrationTests -c release'
          displayName: 'Integration Tests'
        
        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            zipAfterPublish: true
            projects: 'src/Socially.WebAPI'
            arguments: '-o $(Build.ArtifactStagingDirectory)/toDeploy'

        - script: |
            cp pipelines/linux.service $(Build.ArtifactStagingDirectory)/toDeploy
            sed -i 's/#{service.port}#/$(service.port)/' $(Build.ArtifactStagingDirectory)/toDeploy/linux.service
            sed -i 's/#{service.dll}#/$(service.dll)/' $(Build.ArtifactStagingDirectory)/toDeploy/linux.service
            sed -i 's/#{service.directory}#/$(service.directory)/g' $(Build.ArtifactStagingDirectory)/toDeploy/linux.service
          displayName: 'Linux Service Setup'

        - ${{ each config in parameters.configs }}:
          - script: 'echo "Environment=${{ config.title }}=${{ config.val }}" >> $(Build.ArtifactStagingDirectory)/toDeploy/linux.service'
            displayName: Adding configuration for ${{ config.title }}
        - task: PublishBuildArtifacts@1
          displayName: 'Prep for release'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: DeployDev
    displayName: 'Deploy to Development'

    jobs:
      - deployment: UploadWeb
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: 'ls $(Pipeline.Workspace)/drop/toDeploy'
                  displayName: 'Whats going to deploy'

      - deployment: ShowConfig
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: 'cat $(Pipeline.Workspace)/drop/toDeploy/linux.service'
                  displayName: 'Whats the service?'
    
    