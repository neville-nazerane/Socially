<!-- Add comment -->
<div class="d-flex">

    <div class="card card-body card-newcomment">
        <form @onsubmit=AddCommentAsync class="w-100">
            <div class="d-flex">
                <!-- Avatar -->
                @if (isShowingLogo)
                {
                    <div class="avatar avatar-xs me-2">
                        <CurrentUserProfilePicture />
                    </div>
                }
                <!-- Post input -->
                <input @onfocus=ShowLogo @onblur=HideLogo @bind=addModel.Text @bind:event="oninput" class="form-control pe-4 border-0" placeholder="Reply...">
            </div>

            @if (!string.IsNullOrEmpty(addModel?.Text))
            {
                <div class="text-sm-end">
                    <button type="submit" class="btn btn-success-soft">Add</button>
                </div>
            }
        </form>
    </div>

</div>

<!-- Comment wrap START -->
<ul class="comment-wrap list-unstyled">

    @if (Comments is not null)
    {
        foreach (var comment in Comments.Reverse())
        {
            <!-- Comment item START -->
            <li class="comment-item">
                <div class="d-flex">
                    <!-- Avatar -->
                    <div class="avatar avatar-xs">
                        <ProfilePicture FileName=@CachedContext.GetUser(comment.CreatorId).ProfilePicUrl />
                    </div>
                    <!-- Comment by -->
                    <div class="ms-2">
                        <div class="bg-light p-3 rounded">
                            <div class="d-flex justify-content-between">
                                <h6 class="mb-1"> <a href="#!"> @CachedContext.GetUser(comment.CreatorId).FirstName @CachedContext.GetUser(comment.CreatorId).LastName </a> </h6>
                                <small class="ms-2">@comment.CreatedOn.ToDuration()</small>
                            </div>
                            <p class="small mb-0">@comment.Text</p>
                            @if (comment.CreatorId == currentUser?.Id)
                            {
                                <div class="dropdown">
                                    <a href="#" class="text-secondary btn btn-secondary-soft-hover py-1 px-2" id="cardFeedAction1" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </a>
                                    <!-- Card feed action dropdown menu -->
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="cardFeedAction1">
                                        <li><a @onclick:preventDefault @onclick=@(() => DeleteAsync(comment)) class="dropdown-item" href="#"><i class="bi bi-slash-circle fa-fw pe-2"></i>Delete</a></li>
                                    </ul>
                                </div>
                            }
                        </div>
                        <!-- Comment react -->
                        <ul class="nav nav-divider py-2 small">
                            <li class="nav-item">
                                <a class="nav-link" href="#" @onclick:preventDefault @onclick=@(() => LikeAsync(comment))> 
                                    Like (@comment?.LikeCount)
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
                @if (comment.Comments is not null)
                {
                    <ul class="comment-item-nested list-unstyled">
                        <CommentsDisplay Comments=comment.Comments ParentCommentId=comment.Id PostId=PostId />
                    </ul>
                }

            </li>
            <!-- Comment item END -->
        }
    }


</ul>
<!-- Comment wrap END -->